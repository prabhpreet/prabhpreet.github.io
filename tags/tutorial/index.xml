<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prabhpreet Singh Dua</title>
    <link>http://prabhpreet.github.io/tags/tutorial/index.xml</link>
    <description>Recent content on Prabhpreet Singh Dua</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Prabhpreet Singh Dua</copyright>
    <atom:link href="/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sampling sensors</title>
      <link>http://prabhpreet.github.io/post/sampling-sensors/</link>
      <pubDate>Sun, 07 Dec 2014 12:00:00 +0000</pubDate>
      
      <guid>http://prabhpreet.github.io/post/sampling-sensors/</guid>
      <description>

&lt;p&gt;I am currently working on a robotics project and it required a bit of quick testing. The quickest way to get a reading, other than the LCD was UART + a Matlab script. I wrote my own MATLAB script, but it required some obscure functions to get it working.&lt;/p&gt;

&lt;p&gt;So I thought I&amp;rsquo;ll share the important tidbits.&lt;/p&gt;

&lt;h3 id=&#34;the-serial-object&#34;&gt;The serial object&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s kind of like the file pointer data structure in C. It will store the port info, but you&amp;rsquo;ll have to use &lt;code&gt;fopen&lt;/code&gt;, &lt;code&gt;fgets&lt;/code&gt; and &lt;code&gt;fclose&lt;/code&gt; like manipulating files in C. Actually, the port data has been abstracted to the file. However, &lt;code&gt;fclose&lt;/code&gt; is a big deal if you want other programs (such as a code uploader) to access your port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;s = serial(&#39;COM3&#39;) % COM3 is a port. Put whatever port your connected to!

set(s,&#39;BaudRate&#39;, 115200); %Set your baud rate!
s.InputBufferSize = 5000; %Set the input buffer size (how much data can be stored)

fopen(s);

... %Other code omitted

while(1) %Infinite loop!
    if s.BytesAvailable &amp;gt; 0 % To avoid timeout and other weird things
        str = fgets(s);
        ...
    end
end
fclose(s); %Now you can access the object
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exception-error-handling&#34;&gt;Exception/Error handling&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need this part because you want to close your port and let other programs access it in case something bad happens.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;try
... %Your code here
catch err %Catch the damn problem
fclose(s);
end;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;plotting&#34;&gt;Plotting&lt;/h3&gt;

&lt;p&gt;Here you can plot as usual as except you&amp;rsquo;ll have to use &lt;code&gt;drawnow&lt;/code&gt; to plot your data immediately and &lt;code&gt;hold on&lt;/code&gt; if you&amp;rsquo;re going to add data to the existing plot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;figure(1);
hold on;
...
while(1)
    ...
    plot(A);
    drawnow;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;string-manipulation&#34;&gt;String manipulation&lt;/h3&gt;

&lt;p&gt;Here I&amp;rsquo;ve used &lt;code&gt;sscanf&lt;/code&gt; to manipulate the string. I think there is also a direct function to get both getting a line and scanning done at the same time. You can look up the usage easily. The code basically returns a column vector according to the format specified using C&amp;rsquo;s format specifiers (but look it up, to make sure!).&lt;/p&gt;

&lt;p&gt;My data was of a white line sensor and I was getting it&amp;rsquo;s left, middle and right values hence the &lt;code&gt;L:%d M:%d R:%d&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A = sscanf(str, &#39;L:%d M:%d R:%d&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;all-the-code&#34;&gt;All the code&lt;/h3&gt;

&lt;p&gt;Here it is, in all it&amp;rsquo;s glory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;clear all;
close all;

figure(1);
delay = 0.5;

s = serial(&#39;COM3&#39;);

set(s,&#39;BaudRate&#39;, 115200);
s.InputBufferSize = 5000;

fopen(s);

input(&#39;Ready?&#39;);

try
A = [0;0;0];

while(1)
    if s.BytesAvailable &amp;gt; 0
    str = fgets(s);
    A = sscanf(str, &#39;L:%d M:%d R:%d&#39;);
    bar(A)
    axis([0 4 0 255]);
    drawnow
    A = [0;0;0];
    
    end
end;
fclose(s);
catch err
    fclose(s);
end;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
